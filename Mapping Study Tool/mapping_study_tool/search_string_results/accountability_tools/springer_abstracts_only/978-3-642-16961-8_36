                          <p class="Para">Most enterprise computing programs are still <em class="EmphasisTypeItalic ">not</em> written in metaprogramming languages but rather composed line by line in software programming languages as they were decades ago. These programming languages are poorly suited to expressing enterprise processes targeted at complex, domain-specific and transdisciplinary problems. The current state of the art is that legacy programs and scripts can be used as programming instructions provided by <em class="EmphasisTypeItalic ">dynamic service objects</em>. New metaprograms (programs of programs) require <em class="EmphasisTypeItalic ">relevant operating systems</em> managing service objects as a virtual service <em class="EmphasisTypeItalic ">metaprocessor</em>. However, there are presently no acceptable metaprogramming methodologies to program, deploy, and dynamically federate these relevant service objects into a virtual processor securely and efficiently with fault detection and recovery. In this paper the emerging metacomputing SORCER platform with its federated method invocation and exertion-oriented programming model is contrasted with <em class="EmphasisTypeItalic ">service protocol-oriented architectures</em> (e.g., OGSA, CORBA, RMI) which limit us to one fixed wire protocol, static network configurations, and often restricts us to heavyweight containers (e.g., application servers) for hosting service objects.</p>
