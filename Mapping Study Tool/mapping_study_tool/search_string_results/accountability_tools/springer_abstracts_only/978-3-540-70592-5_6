                          <p class="Para">This paper describes Kilim, a framework that employs a combination of techniques to help create robust, massively concurrent systems in mainstream languages such as Java: (<em class="EmphasisTypeItalic ">i</em>) ultra-lightweight, cooperatively-scheduled threads (<em class="EmphasisTypeItalic ">actors</em>), (<em class="EmphasisTypeItalic ">ii</em>) a message-passing framework (no shared memory, no locks) and (<em class="EmphasisTypeItalic ">iii</em>) isolation-aware messaging.</p>
                          <p class="Para">Isolation is achieved by controlling the shape and ownership of mutable messages – they must not have internal aliases and can only be owned by a single actor at a time. We demonstrate a static analysis built around isolation type qualifiers to enforce these constraints.</p>
                          <p class="Para">Kilim comfortably scales to handle hundreds of thousands of actors and messages on modest hardware. It is fast as well – task-switching is 1000x faster than Java threads and 60x faster than other lightweight tasking frameworks, and message-passing is 3x faster than Erlang (currently the gold standard for <em class="EmphasisTypeItalic ">concurrency-oriented</em> programming).</p>
