                          <p class="Para">Mission-critical embedded software performs the core processing logic for pervasive systems that affect people and enterprises everyday, ranging from aerospace systems to financial markets to automotive systems. In order to function properly, these embedded software systems rely on and are highly interdependent with other hardware and software systems. This research identifies design principles for large-scale mission-critical embedded software and investigates their application in development strategies, architectures, and techniques. We have examined actual embedded software systems from two different problem domains, advanced robotic spacecraft and financial market systems, and these analyses established the foundations for these design principles. Both system types embody solutions that respond to detailed specifications defined and modeled with heavy user involvement. Both system types possess mission-critical logic represented using state machines and other structured techniques. They both use a layered architecture approach with a foundation that provides infrastructure services, a layer with a simple set of foreground and background tasks, a layer with deterministic synchronous processing steps, and a layer with event-driven monitoring, commanding, and sequencing capabilities. The architectural approach supports a domain-specific command sequencing macro language that defines table-driven executable specifications and enables developers to work at higher abstraction levels throughout the lifecycle. The architectural approach also facilitates extensibility, reuse, and portability across multi-processor execution environments. The systems rely on extensive built-in self-tests, invariants, and redundant calculations that assess states and detect faults. From a development standpoint, both systems use risk-driven incremental lifecycles, system modeling, end-to-end prototyping, and statistical analysis of development processes. Based on insights gained from embedded software design principles and their application on these as well as other systems, improvement opportunities and research directions will be identified.</p>
